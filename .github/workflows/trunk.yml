name: trunk

on:
  push:
    branches: [ main ]
    paths: [ .github/workflows/trunk.yml ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
#  schedule:
#    - cron: '0 6 * * *'

# imgs: &imgs [ rust, node, rustnode ]
# archs: &archs [ amd64, arm64 ]
# distros: &distros [ debian-latest, debian-bullseye-slim, debian-buster, debian-buster-slim, ubuntu-latest, ubuntu-focal ] # alpine-latest, alpine-3.15, alpine-3.14,
# node_versions: &node_versions [ node, --lts ]

env:
  stable-index: https://github.com/crow-rest/binary-cargo-tools/releases/download/stable-index/
  nightly-index: https://github.com/crow-rest/binary-cargo-tools/releases/download/nightly-index/
  crate: trunk
  repo: https://github.com/thedodd/trunk.git
  license: LICENSE-APACHE,LICENSE-MIT
  bins: trunk
  win_bins: trunk.exe

jobs:
  # Stable
  stable-check:
    outputs:
      crate-version: ${{ steps.check.outputs.version }}
      crate-download: ${{ steps.check.outputs.dl }}
      create-hash: ${{ steps.check.outputs.hash }}
      build: ${{ steps.check.outputs.build }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ahmadnassri/action-workflow-queue@v1
      - uses: actions/cache@v3
        if: ${{ github.event_name != 'pull_request' }}
        with:
          path: |
            ${{ env.crate }}.cache
          key: stable-${{ env.crate }}-${{ env.repo }}-${{ secrets.CACHE_VERSION }}
      - name: Check and Configure
        id: check
        run: ./check.py stable ${{ env.stable-index }} ${{ env.crate }}
      - name: Release Artifact
        #        if: ${{ github.event_name != 'pull_request' }}
        uses: meeDamian/github-release@v2.0.3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.crate }}-${{ steps.check.outputs.version }}
          allow_override: true

  stable-build-x86_64-unknown-linux-gnu:
    needs: [ stable-check ]
    if: ${{ needs.stable-check.outputs.build == 'true' }}
    env:
      CRATE_VERSION: ${{ needs.stable-check.outputs.crate-version }}
      CRATE_DOWNLOAD: ${{ needs.stable-check.outputs.crate-download }}
      CRATE_HASH: ${{ needs.stable-check.outputs.crate-hash }}
      BUILD: ${{ needs.stable-check.outputs.build }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            build/target
          key: ${{ runner.os }}-x86_64-unknown-linux-gnu-stable
      - name: Update Rust
        run: rustup update
      - name: Rust Version
        run: rustc --version
      - name: Create Directory
        run: mkdir -p build
      - name: Download and extract crate # Use checksum!!!
        working-directory: ./build
        run: |
          wget $CRATE_DOWNLOAD
          tar -xf download
          echo "Crate Hash: $CRATE_HASH"
      - name: Build crate
        working-directory: ./build/${{ env.crate }}-${{ env.CRATE_VERSION }}
        run: cargo build --release
      - name: Collect
        run: ./collect.py ${{ env.bins }} ${{ env.license }} x86_64-unknown-linux-gnu ./build/${{ env.crate }}-${{ env.CRATE_VERSION }} ./build/${{ env.crate }}-${{ env.CRATE_VERSION }}/target/release
      - name: Artifact
        uses: actions/upload-artifact@v3
        with:
          name: x86_64-unknown-linux-gnu
          path: |
            x86_64-unknown-linux-gnu.zip
            x86_64-unknown-linux-gnu.sha256
      - name: Release Artifact
#        if: ${{ github.event_name != 'pull_request' }}
        uses: svenstaro/upload-release-action@2.3.0
        with:
          tag: ${{ env.crate }}-${{ env.CRATE_VERSION }}
          overwrite: true
          file_glob: true
          file: x86_64-unknown-linux-gnu.*

  stable-build-x86_64-unknown-linux-musl:
    needs: [ stable-check ]
    if: ${{ needs.stable-check.outputs.build == 'true' }}
    env:
      CRATE_VERSION: ${{ needs.stable-check.outputs.crate-version }}
      CRATE_DOWNLOAD: ${{ needs.stable-check.outputs.crate-download }}
      CRATE_HASH: ${{ needs.stable-check.outputs.crate-hash }}
      BUILD: ${{ needs.stable-check.outputs.build }}
    runs-on: ubuntu-latest
    container: rust:alpine
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            /usr/local/cargo/registry
            /usr/local/cargo/git
            build/target
          key: ${{ runner.os }}-x86_64-unknown-linux-musl-stable
      - name: Add pkgs
        run: apk add --no-cache build-base python3
      - name: Update Rust
        run: rustup update
      - name: Rust Version
        run: rustc --version
      - name: Create Directory
        run: mkdir -p build
      - name: Download and extract crate # Use checksum!!!
        working-directory: ./build
        run: |
          wget $CRATE_DOWNLOAD
          tar -xf download
          echo "Crate Hash: $CRATE_HASH"
      - name: Build crate
        working-directory: ./build/${{ env.crate }}-${{ env.CRATE_VERSION }}
        run: cargo build --release
      - name: Collect
        run: ./collect.py ${{ env.bins }} ${{ env.license }} x86_64-unknown-linux-musl ./build/${{ env.crate }}-${{ env.CRATE_VERSION }} ./build/${{ env.crate }}-${{ env.CRATE_VERSION }}/target/release
      - name: Artifact
        uses: actions/upload-artifact@v3
        with:
          name: x86_64-unknown-linux-musl
          path: |
            x86_64-unknown-linux-musl.zip
            x86_64-unknown-linux-musl.sha256
      - name: Release Artifact
#        if: ${{ github.event_name != 'pull_request' }}
        uses: svenstaro/upload-release-action@2.3.0
        with:
          tag: ${{ env.crate }}-${{ env.CRATE_VERSION }}
          overwrite: true
          file_glob: true
          file: x86_64-unknown-linux-musl.*

  stable-build-x86_64-apple-darwin:
    needs: [ stable-check ]
    if: ${{ needs.stable-check.outputs.build == 'true' }}
    env:
      CRATE_VERSION: ${{ needs.stable-check.outputs.crate-version }}
      CRATE_DOWNLOAD: ${{ needs.stable-check.outputs.crate-download }}
      CRATE_HASH: ${{ needs.stable-check.outputs.crate-hash }}
      BUILD: ${{ needs.stable-check.outputs.build }}
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            build/target
          key: ${{ runner.os }}-x86_64-apple-darwin-stable
      - name: Update Rust
        run: rustup update
      - name: Rust Version
        run: rustc --version
      - name: Create Directory
        run: mkdir -p build
      - name: Download and extract crate # Use checksum!!!
        working-directory: ./build
        run: |
          wget $CRATE_DOWNLOAD
          tar -xf download
          echo "Crate Hash: $CRATE_HASH"
      - name: Build crate
        working-directory: ./build/${{ env.crate }}-${{ env.CRATE_VERSION }}
        run: cargo build --release
      - name: Collect
        run: ./collect.py ${{ env.bins }} ${{ env.license }} x86_64-apple-darwin ./build/${{ env.crate }}-${{ env.CRATE_VERSION }} ./build/${{ env.crate }}-${{ env.CRATE_VERSION }}/target/release
      - name: Artifact
        uses: actions/upload-artifact@v3
        with:
          name: x86_64-apple-darwin
          path: |
            x86_64-apple-darwin.zip
            x86_64-apple-darwin.sha256
      - name: Release Artifact
#        if: ${{ github.event_name != 'pull_request' }}
        uses: svenstaro/upload-release-action@2.3.0
        with:
          tag: ${{ env.crate }}-${{ env.CRATE_VERSION }}
          overwrite: true
          file_glob: true
          file: x86_64-apple-darwin.*

  stable-build-x86_64-pc-windows-msvc:
    needs: [ stable-check ]
    if: ${{ needs.stable-check.outputs.build == 'true' }}
    env:
      CRATE_VERSION: ${{ needs.stable-check.outputs.crate-version }}
      CRATE_DOWNLOAD: ${{ needs.stable-check.outputs.crate-download }}
      CRATE_HASH: ${{ needs.stable-check.outputs.crate-hash }}
      BUILD: ${{ needs.stable-check.outputs.build }}
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            build/target
          key: ${{ runner.os }}-x86_64-pc-windows-msvc-stable
      - name: Update Rust
        run: rustup update
      - name: Rust Version
        run: rustc --version
      - name: Create Directory
        run: mkdir -p build
      - name: Download and extract crate # Use checksum!!!
        working-directory: ./build
        run: |
          Invoke-WebRequest -Uri ${{ env.CRATE_DOWNLOAD }} -OutFile download
          tar -xf download
          echo "Crate Hash: $CRATE_HASH"
      - name: Build crate
        working-directory: ./build/${{ env.crate }}-${{ env.CRATE_VERSION }}
        run: cargo build --release
      - name: Collect
        run: python3 collect.py ${{ env.win_bins }} ${{ env.license }} x86_64-pc-windows-msvc ./build/${{ env.crate }}-${{ env.CRATE_VERSION }} ./build/${{ env.crate }}-${{ env.CRATE_VERSION }}/target/release
      - name: Artifact
        uses: actions/upload-artifact@v3
        with:
          name: x86_64-pc-windows-msvc
          path: |
            x86_64-pc-windows-msvc.zip
            x86_64-pc-windows-msvc.sha256
      - name: Release Artifact
#        if: ${{ github.event_name != 'pull_request' }}
        uses: svenstaro/upload-release-action@2.3.0
        with:
          tag: ${{ env.crate }}-${{ env.CRATE_VERSION }}
          overwrite: true
          file_glob: true
          file: x86_64-pc-windows-msvc.*

  # TODO: arm64 linux(s) :: The idea is to build in a docker container then run that container with an entrypoint that
  #                      :: automatically moves the bins to the mounted volume.

  stable-build-aarch64-apple-darwin:
    needs: [ stable-check ]
    if: ${{ needs.stable-check.outputs.build == 'true' }}
    env:
      CRATE_VERSION: ${{ needs.stable-check.outputs.crate-version }}
      CRATE_DOWNLOAD: ${{ needs.stable-check.outputs.crate-download }}
      CRATE_HASH: ${{ needs.stable-check.outputs.crate-hash }}
      BUILD: ${{ needs.stable-check.outputs.build }}
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            build/target
          key: ${{ runner.os }}-aarch64-apple-darwin-stable
      - name: Update Rust
        run: rustup update
      - name: Rust Version
        run: rustc --version
      - name: Add Rust target
        run: rustup target add aarch64-apple-darwin
      - name: MacOS SDK
        run: |
          export SDKROOT=$(xcrun -sdk macosx --show-sdk-path)
          export MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx --show-sdk-platform-version)
      - name: Create Directory
        run: mkdir -p build
      - name: Download and extract crate # Use checksum!!!
        working-directory: ./build
        run: |
          wget $CRATE_DOWNLOAD
          tar -xf download
          echo "Crate Hash: $CRATE_HASH"
      - name: Build crate
        working-directory: ./build/${{ env.crate }}-${{ env.CRATE_VERSION }}
        run: cargo build --release
      - name: DEBUG # REMOVE
        working-directory: ./build/${{ env.crate }}-${{ env.CRATE_VERSION }}
        run: |
          ls target/release
      - name: Collect
        run: ./collect.py ${{ env.bins }} ${{ env.license }} aarch64-apple-darwin ./build/${{ env.crate }}-${{ env.CRATE_VERSION }} ./build/${{ env.crate }}-${{ env.CRATE_VERSION }}/target/release/aarch64-apple-darwin
      - name: Artifact
        uses: actions/upload-artifact@v3
        with:
          name: aarch64-apple-darwin
          path: |
            aarch64-apple-darwin.zip
            aarch64-apple-darwin.sha256
      - name: Release Artifact
#        if: ${{ github.event_name != 'pull_request' }}
        uses: svenstaro/upload-release-action@2.3.0
        with:
          tag: ${{ env.crate }}-${{ env.CRATE_VERSION }}
          overwrite: true
          file_glob: true
          file: aarch64-apple-darwin.*


  # Nightly
  
  # OLD
